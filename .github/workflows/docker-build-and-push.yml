name: Build and Push Docker Image

on:
  repository_dispatch:
    types: [trigger_docker_build]

permissions:
  contents: write  
  actions: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Scout
        run: |
            curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
            sh install-scout.sh

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd ./microservices/my-tube/
          IMAGE_TAG=${{ github.event.client_payload.docker_repo }}:${{ github.sha }}
          docker build -t $IMAGE_TAG ./${{ github.event.client_payload.image_dir }}
          docker push $IMAGE_TAG

      - name: Run Docker Scout scan
        run: |
          docker scout cves $IMAGE_TAG > scout_report.txt || exit 0
          cat scout_report.txt

    # - name: Upload Docker Scout report
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: scout-report
    #     path: scout_report.txt

      - name: Check Docker Scout results
        id: check_scout
        run: |
          if grep -q "Critical" scout_report.txt; then
            echo "Vulnerabilities found! Aborting deployment."
          else
            echo "No critical vulnerabilities found."
          fi

      - name: Trigger next workflow with inputs
        run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{
            "event_type": "trigger_clusters_creation",
            "client_payload": {
              "image_dir": "${{ github.event.client_payload.image_dir }}",
              "placeholder": "${{ github.event.client_payload.placeholder }}"
              }
          }'
