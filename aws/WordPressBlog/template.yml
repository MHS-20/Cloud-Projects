---
# Non creare EC2, usa launch template dell'autoscaling group
# Puoi definire dei parametri e poi li passi dalla CLI o dalla console
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template for WordPress"
Resources:
  ##### VPC #####
  WpVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WpVPC
      InternetGatewayId: !Ref InternetGateway

  ##### SUBNETS #####
  # AZ1
  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref WpVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"

  # AZ2
  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref WpVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1b"

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref WpVPC
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1c"

  #### NAT Gateway ####
  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  ##### ROUTE TABLES #####
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  NAT-Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    DependsOn: NatGateway

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  ##### SECURITY GROUPS #####
  # Exposed to the Internet
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable HTTP access via port 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"

  # EC2
  WPSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable access only from LoadBalancer SecurityGroup "
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # EFS
  EFS_SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable access from WPSecurityGroup "
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "2049"
          ToPort: "2049"
        - IpProtocol: udp
          FromPort: "2049"
          ToPort: "2049"
          SourceSecurityGroupId: !Ref WPSecurityGroup

  # MySQL
  RDS_SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable access only from WPSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId: !Ref WPSecurityGroup

  ##### RESOURCES #####
  RDS:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: "5"
      DBInstanceClass: "db.t2.micro"
      DBInstanceIdentifier: "wp-mysql"
      DBName: "wp-mysql"
      Engine: "mysql"
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      BackupRetentionPeriod: 0
      MultiAZ: true
      VPCSecurityGroups:
        - !Sub ${RDS_SecurityGroup.GroupId}
      DBSubnetGroupName: !Ref DBSubnetGroup
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      Description: DB subnet group
      SubnetIds:
        - Ref: SubnetA
        - Ref: SubnetB

  FileSystem:
    Type: "AWS::EFS::FileSystem"
    Properties:
      Encrypted: "true"
      PerformanceMode: "generalPurpose"
      ThroughputMode: "bursting"
      BackupPolicy:
        Status: "ENABLED"
        PreferredBackupWindow: "02:00-03:00"
        BackupRetentionPeriod: 7
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Principal:
              AWS: "*"
            Action: "*"

    MountTargetA:
      Type: "AWS::EFS::MountTarget"
      Properties:
        FileSystemId: !Ref FileSystem
        SubnetId: !Ref SubnetA
        SecurityGroups:
          - !Ref EFS_SecurityGroup
    MountTargetB:
      Type: "AWS::EFS::MountTarget"
      Properties:
        FileSystemId: !Ref FileSystem
        SubnetId: !Ref SubnetB
        SecurityGroups:
          - !Ref EFS_SecurityGroup

  ### Load Balancer
  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "my-alb"
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: "internet-facing"
      DependsOn: VPCGatewayAttachment
      LoadBalancerAttributes:
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"

  ### ALB Target Group
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: "my-target-group"
      Port: 80
      Protocol: "HTTP"
      VpcId: !Ref WpVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"

  ### ALB Listener
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: "HTTP"

  ### Launch Template
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "my-launch-template"
      LaunchTemplateData:
        ImageId: "ami-0c55b159cbfafe1f0"
        InstanceType: "t2.micro"
        SecurityGroupIds:
          - !Ref WPSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # * Installing Apache, PHP and MySQL
            yum update -y
            yum install -y httpd24 php56 mysql55-server php56-mysqlnd

            # * Mounting EFS
            yum install -y amazon-efs-utils
            mkdir /var/www/html/wp-content
            mount -t efs ${FileSystem}:/ /var/www/html/wp-content

            # * Installing WordPress
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz -C /var/www/html --strip-components=1
            chown -R apache:apache /var/www/html/
            chmod -R 755 /var/www/html/

            cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
            sed -i "s/database_name_here/$DB_NAME/g" /var/www/html/wp-config.php
            sed -i "s/username_here/$DB_USER/g" /var/www/html/wp-config.php
            sed -i "s/password_here/$DB_PASSWORD/g" /var/www/html/wp-config.php
            sed -i "s/localhost/$DB_HOST/g" /var/www/html/wp-config.php
            sed -i "s/3306/$DB_PORT/g" /var/www/html/wp-config.php

            # * Starting Apache
            systemctl start httpd
            chkconfig httpd on

  ### Auto Scaling Group
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

# Route 53
  DNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: "Z2FDTNDATAQYW2"
      Name: "wordpress.example.com"
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: "Z2FDTNDATAQYW2"

  ### Scaling Policy
  ScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
      DependsOn: VPCGatewayAttachment

### PatchManager ####
PatchBaseline:
  Type: "AWS::SSM::PatchBaseline"
  Properties:
    Name: "my-patch-baseline"
    OperatingSystem: "AMAZON_LINUX"
    GlobalFilters:
      - Key: "Classification"
        Values:
          - "Security"
          - "Critical"
    ApprovalRules:
      PatchRules:
        - PatchFilterGroup:
            PatchFilters:
              - Key: "MSRC_SEVERITY"
                Values:
                  - "Critical"
                  - "Important"
        - PatchFilterGroup:
            PatchFilters:
              - Key: "PATCH_SET"
                Values:
                  - "SECURITY"
    Description: "Patch baseline for my instances"

### CloudWatch Alarms ####
PercentIOLimitTooHighAlarm:
  Type: "AWS::CloudWatch::Alarm"
  Properties:
  AlarmDescription: "I/O limit has been reached, consider ..."
  Namespace: "AWS/EFS"
  MetricName: PercentIOLimit
  Statistic: Maximum
  Period: 600
  EvaluationPeriods: 3
  ComparisonOperator: GreaterThanThreshold
  Threshold: 95
  Dimensions:
    - Name: FileSystemId
  Value: !Ref FileSystem

BurstCreditBalanceTooLowAlarm:
  Type: "AWS::CloudWatch::Alarm"
  Properties:
  AlarmDescription: "Average burst credit balance over last ..."
  Namespace: "AWS/EFS"
  MetricName: BurstCreditBalance
  Statistic: Average
  Period: 600
  EvaluationPeriods: 1
  ComparisonOperator: LessThanThreshold
  Threshold: 192000000000
  Dimensions:
    - Name: FileSystemId
  Value:
    !Ref FileSystem

### Outputs ####
Outputs:
  WordPressURL:
    Description: "WordPress URL"
    Value: !Sub "http://${ALB.DNSName}/wordpress"
  RDS:
    Description: "RDS Endpoint"
    Value: !GetAtt RDS.Endpoint.Address
  FileSystem:
    Description: "EFS DNS Name"
    Value: !GetAtt FileSystem.DnsName
  ALB:
    Description: "ALB DNS Name"
    Value: !GetAtt ALB.DNSName

    # WPInstance:
    #   Type: "AWS::EC2::Instance"
    #   Properties:
    #     ImageId: "ami-0c55b159cbfafe1f0"
    #     InstanceType: "t2.micro"
    #     KeyName: "mykey"
    #     SecurityGroupIds:
    #       - !Ref WPSecurityGroup
    #     SubnetId: !Ref SubnetA
    #     UserData:
    #       Fn::Base64: !Sub |
    #         #!/bin/bash -xe
    #         yum update -y
    #         yum install -y httpd24 php56 mysql55-server php56-mysqlnd
    #         service httpd start
    #         chkconfig httpd on
    #         echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
